[
    
        
            {
                "ref": "/post/essay/general_update_002/",
                "title": "General Update 002: Authenticity of Qualitative thinking",
                "section": "post",
                "date" : "2021.02.12",
                "body": "I know I am a week late in posting \u0026amp; this was supposed to be an update no. 003 but I have a good reason. So after reviewing the last week\u0026rsquo;s essay draft multiple times, I decided against posting. There are a couple of reasons behind that. Firstly, the essay was not polished enough. Second and most important, I strongly felt that my writing style was not of much value, even to me.\nThe whole structure of the last week\u0026rsquo;s draft lacked some sort of essence. To be precise, I came with the following word: The authenticity of qualitative thinking. The essay felt like an exam answer that I wrote after doing a sheer amount of rote memorization. And everyone knows that it\u0026rsquo;s never a great way to engage qualitative thinking.\nEvery sentence that I had put together was a blend of raw information that I\u0026rsquo;ve fed my brain by reading multiple technical blogs. I was using way too many technical terms that would make no sense to you unless you read the same type of blogs or go through that same line of thoughts. This is a very bitter realization of how I\u0026rsquo;ve limited my ability to think or question the status quo. All I\u0026rsquo;m doing with my essay is feeding the same line of thoughts with added vagueness.\nI\u0026rsquo;m glad that I caught this early, but the question is, can I proactively correct this? Well, The least I can do is put some originality. My intentions were never to write a purely technical blog. I wanted to keep things simple, understandable, yet usable. But to achieve that perfect combination, a great deal of critical thinking is required, and to do critical thinking freely, you mustn\u0026rsquo;t constraint yourself and your mind with a timeline 🙂. So weekly update doesn\u0026rsquo;t seem like a good idea for now but I\u0026rsquo;d try to keep the frequency of writing/posting as high as possible.\nI\u0026rsquo;m not sure how good I am at critical thinking, but It\u0026rsquo;s a good chance to sharpen that skill. With that being said, I hope I can continue writing essays that I am proud of.\n"
            }
        
    ,
        
            {
                "ref": "/post/essay/weekly_update_001/",
                "title": "Weekly Update 001: What do I work on?",
                "section": "post",
                "date" : "2021.01.31",
                "body": "It\u0026rsquo;s a new year! As a protocol, the new year should be accompanied by new changes. Following the protocol, I\u0026rsquo;ve decided to try new things too.\nIt\u0026rsquo;s been ages since I blogged and I\u0026rsquo;ve always loved blogging. I\u0026rsquo;m never short of thoughts or stuff to share, but blogging requires a little patience, at least for me. There\u0026rsquo;ve been times where I spent ~2 months on a single blog post, to make sure that I get the content right. And I believe that this extreme scrutiny sometimes stops me to put a chunk of time aside to jot down a new post.\nI\u0026rsquo;ve been working in a startup called Instabase for the past year. When you work in a startup, time as an asset becomes more valuable, and it becomes even more challenging to extract that time. On the flip side, there\u0026rsquo;s so much learning and new stuff happening, there\u0026rsquo;s never a shortage of things to share. So the plan is to leverage this advantage to cater to my love for blogging, fix the scrutiny process, and write more. I\u0026rsquo;m going to do a weekly update series, where I\u0026rsquo;m going to cover different domains of applications I\u0026rsquo;m working on and problems that I tackle on day to day basis. The content is basically going to be a mix of things I\u0026rsquo;m learning, problems I\u0026rsquo;m tackling, with a blend of opinions on stuff (Which can be biased), so I\u0026rsquo;d recommend taking everything with a pinch of salt 🙂\nContext My team handles the monitoring and observability side of our platform/Infra. Monitoring and observability is a pretty hot thing in Industry because every company that is in Tech, directly or indirectly, needs it. There are tons of companies like datadog, New Relic, AppDynamics, Sumo logic, Pixie, etc that specifically cater to the monitoring needs of other organizations who don\u0026rsquo;t have the expertise or resources to build their own monitoring platform. Outsourcing the observability to these vendors allows organisations to focus on the product they\u0026rsquo;re building. These vendors are in high demand because they offer you good services but that being said, it can get pretty expensive too. The cost implications of every extra log and metrics your product is generating needs to be accounted.\nBuilding your own monitoring platform can be challenging but It can be cost effective in longer run.\nWhat do I work on? I hope you got the gist of the domain, so let\u0026rsquo;s come back to the topic of what exactly do I work on? Our team works on creating the monitoring Infra and framework. To achieve that target, we use a plethora of already existing tools and solve problems that come with monitoring a dynamic platform (think of Kubernetes). Here is a rough list of some of the necessary tools:\n [Tools I work with]  A tool for Monitoring the pods/containers/apps running on the platform A tool for writing alerting logic (When to alert and Where to alert [email/slack etc] ) A tool for visualizing the metrics A database to store all metric data A tool for instrumenting the code [to get internal insights]   [Tools I don\u0026rsquo;t work with]  A tool for tracing a request A tool for collecting, storing, and querying logs    On day to day basis, my work is basically divided into 2 categories:\n Operations  Review the health of monitoring Infra Experimenting with new configurations for various tools Shipping/Deploying/Testing monitoring tools at Instabase/Customers env. Creating visualization for metric data   Application  Writing Design docs and code for instrumenting various microservices. Reviewing and maintaining the libraries that I own.    Every Developer is aware of Application domain. It involves writing code and building apps using various languages and libraries. In operations, you acquire domain-specific knowledge of a tool/technology to deploy, serve, test or monitor your applications.\nFor example, if my target is to deploy a website and make it accessible at a particular URL on the gcloud kuberentes engine. This is what I may need to do:\n Learn how the Kubernetes command-line tool works Learn about deployments and services objects in Kubernetes Create a docker image of my website Write Kubernetes yaml files for my website app Set up a load balancer and then connect everything   There\u0026rsquo;s so much more to each of these domains, technology and tools that I\u0026rsquo;ve covered till now. For the sake of avoiding information overload, I\u0026rsquo;ll stop here and use future posts to drill down on each of them.\nWeekly Update For a couple of weeks, I\u0026rsquo;ve been working on delivering our monitoring platform to one of our customers. Delivering involves preparing container images for different services, creating deployment files, and then working with customers\u0026rsquo; engineers to deploy and test the end-to-end working. Instabase is an OS, that we deploy wherever our customer wants. It could be on gcloud, AWS, azure, openshift, or their own on-prem Infra. We\u0026rsquo;ve realised that every cloud infra comes with its own set of challenges.\nWe\u0026rsquo;re doing a beta release of our monitoring platform for our customers to test the waters and figure out different challenges we might run into. The purpose is to find out if we need to do certain things differently. I faced few blockers but one major one was the lack of data around CPU and memory usage of microservice. If we don\u0026rsquo;t have data, neither our visualization dashboard works nor our alerting rules. It tends to break few things.\nI brainstormed on different ways we could get those missing data, tested a few of those solutions in my sandbox Kubernetes environment, and was all set to deploy it at customers. But unfortunately, we ran into permission issues to perform certain actions on the customers\u0026rsquo; cloud. We had to involve their cloud team to help us with this.\n On the applications side, I continued working on instrumenting the code for our database library. The purpose of instrumentation is to get some telemetry data on the health and performance of the code/service. This telemetry data could be:\n How many times a certain function is called (Traffic received) Duration of execution of those functions (latency of response) No. of time the function is running into an error (error rate)  I also created a design doc outlining different telemetry data we plan on capturing, why we\u0026rsquo;re capturing it, the implementation plan, and what problems we intend to solve through this data. I\u0026rsquo;ll try to discuss the importance of a design doc in next post.\nI\u0026rsquo;ve kept this weekly update small and concise because it was important to provide the metacontext of \u0026ldquo;What I work on\u0026rdquo; first. In the coming weeks, the plan is to make updates more elaborate, so I can actually share my learnings.\nCheers to more learning..!!\n"
            }
        
    ,
        
            {
                "ref": "/post/essay/how_to_infrastructure_engineer/",
                "title": "How to Infrastructure Engineer: Noob Edition",
                "section": "post",
                "date" : "2020.07.09",
                "body": "The Internship that I was so excited about in the late 2K19 is finally over and I’m back here again to share my learnings. Even though my job profile stated “Software Engineer”, it was quite different from traditional software engineering because I was part of the \u0026ldquo;Infrastructure team\u0026rdquo;.\nA simple google search about “infrastructure engineer” would result in something like this:\n An Infrastructure Engineer is responsible for designing, coordinating and maintaining the infrastructure used by an organisation to deploy, run and scale their software.\n Here is a small story for more context:\nWhat is Infrastructure Engineering? Imagine you invented a new type of tasty chocolate through some chemical experimentation. You’re sure that this chocolate would change the food industry forever and you’ll be a billionaire once you launch it in the market.\nYou bought a factory, cooking machines, chocolate material in bulk, and hired some workers to do the baking. You started the production on a large scale. By the way, Is chocolate baked or cooked? Nevermind.\nBut on the first day of the market launch, you suffered a huge loss as no one was buying your chocolate. To figure out what went wrong, you opened one chocolate packet to taste and to your surprise, it tasted nothing like what you invented. What caused this? Is the recipe wrong? Is this the fault of workers? Or is there something wrong with your factory’s Infrastructure (i.e. the machines and chocolate material)?\nThis is how crucial underlying infrastructure is for the success of any idea. It doesn’t matter how tasty your chocolate is on paper or in the kitchen, if you cannot produce it on a large scale with the minimum difference between kitchen cooked chocolate and factory cooked chocolate, you can’t become rich. To produce perfect chocolate, you need to build an efficient infrastructure for your factory, and to build and operate that infrastructure, you need to hire engineers.\nThe same goes for software and web application. Would you have used google if it would have taken 2 minutes every single time you searched \u0026ldquo;nearest hospital\u0026rdquo;? That\u0026rsquo;s why infrastructure is very critical in defining the success of an organization and this is the reason most of the organizations are moving to cloud (See Google Cloud and AWS), where they outsource the design and implementation of hardware infrastructure (Server racks, networking, hardware load balancing) to the best players in the industry.\n   I got interested in infra when I was learning how to design systems. The term \u0026ldquo;building a scalable and reliable system” used to bring sparkles in my eyes. The opportunity to explore this field came knocking at my door when I cracked the interviews of a startup and got an option to either join the applications team or Infrastructure team, and the decision was a no-brainer.\nWhen I started my work as an Infrastructure engineer, I was considerably unaware of the infra oriented terminologies. My manager slash mentor did his best to guide me in the right direction. Before starting the internship, I knew that this experience would be different from traditional software engineering, but I was not sure in what way. I couldn’t find sources that could inform me what to expect and what framework I should adopt to perform better in this field.\nSo, after working as an Infra engineer for the past 6 months, this article is for anyone who’s starting in the same field or is interested in knowing what challenges one faces and what goals one should set in terms of learning. Although 6 months is a very small time to form any opinions or to give any advice/recommendations, my motive with writing this essay is to suggest a framework to get head-start before you start work as an infra engineer. I believe that this article would be a good read if you’re a noob like me 🙂\n Disclaimer: My work mainly revolved around microservices and cloud, therefore most of the examples are cited from these particular domains.\n I’ve tried my best to define the framework to be stack agnostic. Therefore, this essay won’t list the topics you should learn or the courses you should take.\nAnyways, let’s get back to the topic. Here is the list of few pointers one should keep in mind if they’re a noob infra engineer like me:\n1. Understand modern cloud application \u0026amp; systems In the very first month, I was deploying systems to the cloud and I had very little idea what I was doing. I was dealing with tools like Kubernetes(k8s), gcloud/aws cli, load balancer, docker, etc. These tools heavily dominate modern cloud applications and having a good understanding of basic CS concepts helps one to understand the underlying notion of all such tools.\nWhile operating such systems, we spend a considerable amount of time making them run. Remember the first time you ran an open-source project on your local machine? Well, you better get good at these sorts of things. Then there are different ways to run tools: run a binary, build the tool from source or just run a simple docker image.\nSome of the challenges that I faced involved running a local Kubernetes cluster, deploying a platform that I was working on to a K8s cluster in google cloud (took me few days), running a time-series database in the cloud (took me weeks due to some error in mounting a volume).\nThere was a time when I was deploying systems ~20 times a day. Then I monitored it’s stability, performance, and reliability. A good understanding of cloud apps and systems gradually helped me to speed-up this process.\n2. Develop a sense of understanding and comparing software solutions As an Infra Engineer, you make critical decisions that have a considerable impact on the organization\u0026rsquo;s future. Those decisions include deciding what third-party software to use for custom needs, ex. automation tool to use for CI/CD, load balancer for traffic needs, database for storing logs and metrics. When I made all such decisions, I received extensive feedback on what should be considered.\nHere are some rough parameters that should be taken into account while making decisions:\n Does the software have better community adoption? (Is it being used by developers and engineering organizations) Does it scale? (As the load increases, does it’s performance deteriorate?) Is it stable? (We don’t want the hell to break loose in production) Do they roll-out new features at regular intervals? Is the solution being maintained and developed by a good organization? Is this an efficient solution in terms of resource usage (CPU, Memory, Disk, and Network) Would this require extra installation complexity?  I had to answer all the above questions whenever I made a case to adopt a particular app or tool. I worked on a requirement that had 7-8 potential solution candidates and it dropped to 2-3 because we didn’t want extra installation complexity and large CPU \u0026amp; memory usage. It’s wise to choose a particular version of a tool/software not based on how many features they offer but how stable it is. This was a new revelation for me because I thought that the latest is the best.\nCurrently, I’m working on getting better at going through and understanding the release notes of a software.\n3. Learn to measure performance Another important area that Infra engineers spend their time on is evaluating the performance of tools/service/system. Although third-party tools like caches, databases, etc provide rough numbers on performance, that should not stop you from doing your testing. The production environments are far from ideal. Here different tools would be interacting with different components and the true picture remains unclear(in terms of performance \u0026amp; stability) until you run your system/tools in production and people start using it.\nEverything looks efficient on paper until all hell breaks loose in prod. Just to cite an example, I worked with a database that promised faster queries but when I deployed it in the cloud, it showed 10x the expected latency. I debugged the issue for ~15 days only to realize that the issue lies in a different tool that resided between user and database. I only realized this after I conducted a load test on the database(by isolating it).\n4. Not just fix the errors, learn from them This is an important point when you are aiming to maximize learning. Whenever I solve an issue I do a ton of google search and I try all the different options until I either run out of options or the issue is resolved. it’s very tempting to not look at the actual cause of an issue after it\u0026rsquo;s resolved, but try to resist that temptation. Evaluate all the solutions that you tried, figure out what worked and what didn’t, and then document the findings for future reference. Trust me, this process works like a charm.\n5. Master the art of isolating the problem While operating systems at scale, Infra engineers encounter several issues. Once you face an issue, you come up with a probable cause or the bottlenecks. The faster you identify the root cause, the more time you save. According to me, 3 major things help engineers to solve an issue. The first one is a smart google search 😛, second is historical knowledge and the 3rd one is the art of isolating the problem.\nThe art of isolating a problem helps you to reach the root cause faster. It minimizes the space of probable cause by discarding causes on reasonable grounds one at a time.\nI faced an issue where the load balancer interacted with a visualization tool and visualization tool talked to the database \u0026amp; a monitoring tool. There were performance issues with the database and I assumed the problem lies within the database. After debugging for approx. 10 days, I eventually added the load balancer and visualization tool to the list of probable cause of the issue and It turned out that the visualization tool was the culprit. Now those 10 days could easily have been a few hours if I had better skills in isolating the problem. There’s no doubt that one becomes better at this with time but always keep an eye out for issues where you require this expertise.\n6. Learn vim As an infra engineer, I spent around 60% of my time in the terminal. Oftentimes I had to exec into a container or ssh into a virtual machine and only text editors that I had at my disposal were vim or nano. I needed to add code in a file, run it, edit already existing files, etc and I didn\u0026rsquo;t have the option to perform those operations in fancy text-editor (like vs-code or sublime). This is where vim comes in the picture. It’s quite powerful and It would not be an overstatement to call vim as powerful as a programming language. It has its commands, some intriguing shortcuts, and tons of cool features. This is how vim helps to optimize many repetitive text editing operations.\nThe learning curve of vim is a bit steep as I’ve also struggled in memorizing commands and shortcuts, but once you get acquainted with it you can save tons of hours. I’m still a noob when it comes to using vim but it’s a work in progress.\n7. Take security seriously The Internet is an evil place where millions of attackers are always ready to exploit the vulnerabilities in your system, therefore security should always be the priority, especially for infra engineers. I learned this the hard way. I almost performed an equivalent of “an intern deleting the production database” when I exposed a port of a virtual machine in the cloud to the internet which then almost got cryptojacked.\nAs an Infra engineer, we deploy many apps in the cloud, and then we expose them to the internet to be accessible. We need to be aware of the security policies and best practices to minimize the impact if our system gets attacked. So for example, it\u0026rsquo;s not wise to keep \u0026ldquo;the user type\u0026rdquo; inside a docker container as root. This is because even if the attacker successfully takes control of the container, it could not take advantage of the situation. It won’t have the privilege to run dangerous commands as most of the lethal commands require root access.\n8. Document, Document \u0026amp; Document This is true for engineers, no matter the field. The amount of value you get by documenting what you work on and learn is immense. I regret not documenting anything that I learned during my 2 months Internship. As a result, I don’t remember most of the things I built there.\nDocumentation helps you to present your story: the challenges you faced, the new findings, and how you solved problems. I made notes of everything that I did during my Internship as an infra engineer, and now whenever I look at those notes, everything that I learned and experienced rushes back to my mind at one glance.\n9. Designing and understanding the system at scale This is one of the cool skills that an infra engineer generally possess. I came across many system diagrams of various tools and it’s always cool to understand why they are designed like that. The system\u0026rsquo;s knowledge answers whether to go for, monolith or microservice, pull or push, synchronous process or async process, cache or database?\nUnderstanding multiple systems helps one to develop a broader sense of things and gradually a person becomes capable enough to design a system of their own. The system is designed by multiple people but It\u0026rsquo;s difficult to test the scalability, performance \u0026amp; reliability of the system without an infra engineer 😉\nConclusion I’m quite positive that If you adopt this framework from day one, you’d be performing a lot better at your job. Then you’ll be learning lessons of your own and the process goes on. Since I’ve identified these points, it doesn’t imply that I have mastered them but I believe that identifying them is the first step towards getting better at infrastructure engineering.\nThe real reason I like infra engineering is that it requires the use of concepts that made me interested in computer science in the first place (like OS, database, computer architecture, networking, etc). If you are also interested in these concepts and this essay sparks the interest in you regarding infrastructure engineering, then maybe it’s something you should try to explore.\n"
            }
        
    ,
        
            {
                "ref": "/post/essay/letter_from_my_19_year_old_self/",
                "title": "Letter from My 19-Year-Old self",
                "section": "post",
                "date" : "2020.06.15",
                "body": "Who says you can\u0026rsquo;t time travel? I\u0026rsquo;m glad to tell you that there are ways to hack the system. When I was 19-Year-Old, I found the concept of writing a letter to your future self very intriguing. I wanted to try it out, so I decided that on every birthday I’d write a letter to myself, that I’d open on my next birthday.\nIn that pursuit, my 19-Year-Old self decided to write a letter for me and I\u0026rsquo;m glad he did that. I felt it was quite a motivating message and I thought it would be interesting to share this with everyone.\nThe Letter  congrats on turning 22 today, this is your 19-year-old self. I hope you have come a long way from where you started. I hope you are still optimistic about your future. Right now it doesn\u0026rsquo;t matter what has happened in the past. I hope you have recovered from all the failures and heartbreaks \u0026amp; learned from them. I just want to tell you, that I believe in you, that you will make everything thing right and if everything is already right for you, you\u0026rsquo;ll help others to make it right for them 🙂\nI want you to recollect all your energy and be as enthusiastic as I am while writing this, if possible, even more. it\u0026rsquo;s not the time to be exhausted, it\u0026rsquo;s where you revolutionize your life, turn it upside down, become more stupid, take more challenges. Your current life might be very different from what I imagined for you but I want to tell you something, life is not what you imagine, it is what you experience and I want you to try out many things.\nmany things might have changed in your life and I hope you have dealt with them accordingly, but even if you made some mistakes that is fine with me, as long as you have thought through and rectified them. I will not lecture you on how to go through your career because I know you would have already figured it out ( because this is what I am good at, figuring things out 😛 ) and I know it\u0026rsquo;s best for you \u0026amp; me.\nand I would be really really disappointed if you didn\u0026rsquo;t travel much. I hope you don\u0026rsquo;t disappoint me in this domain. I hope you have made many more connections in these years and ready to make some new ones. so let\u0026rsquo;s start our new journey with a blast. In the end, I have 4 words for you: STAY HUNGRY, STAY FOOLISH\n  If in some parallel universe my 19-Year-Old self could see his future, I hope he’s satisfied with what he goes on to accomplish.\n   On a side note, we are having great deal of discussion on mental health but no one\u0026rsquo;s providing a good framework to excercise it. I would encourage everyone to try something on these lines. It\u0026rsquo;s extremely therapeutic and provides a good framework to track your emotional growth.\nEveryone makes progress in life but if it aligns with your vision for you, the feeling of satisfaction and happiness rises to another level. whenever you are happy, try to capture those moments in your own words and in tough times turn to these words and try to re-live all such happy moments again. It would make you believe that tough times doesn\u0026rsquo;t lasts long and things always gets better 🙂\n"
            }
        
    ,
        
            {
                "ref": "/post/essay/so_you_think_you_have_privacy/",
                "title": "So You Think You Have Privacy?",
                "section": "post",
                "date" : "2020.04.15",
                "body": "For years I have known that privacy is a myth and has become a defunct concept. All the tech giants who are in active-pursuit to control the Internet have made sure that it\u0026rsquo;s hard to care about privacy. But then one day I stumbled upon this podcast that made me realize that the majority is unaware of this fact.\n        This podcast features Edward Snowden who emphasizes the fact of how we have been stripped away from our right to privacy without our permission and were made to believe that it was for our benefit. This video had a big impact on how I perceived my privacy. I followed it up by reading his autobiography, Permanent Record, which was a perfect book for a geeky person such as myself. He talks about what motivated him to build and operate a huge surveillance network for his country, which is now used to spy and store records of every single person on the planet. I highly recommend watching this podcast and reading this awesome book. Most of the facts that I’m going to share here in this blog post were derived from them. My main motive here is to acquaint or inform you how deadly this breach of your privacy is, how it’s done and what potential repercussion it can have in the near future. You’d be surprised to know how you get compromised every day in various ways and what those hundred of user agreements, you\u0026rsquo;ve knowingly and unknowingly agreed to, actually means.\nIf you feel that you are being watched, monitored or tracked every day, you are not wrong. I can assure you that it’s being done. Maybe you are not a threat, but who gets to decide the definition of threat? We get spied on every day, we get tracked, our data on social media is exploited, our call records are stored, our sentiments are analyzed and we are looked as a product by businesses and as a threat by the Intelligence.\nIt\u0026rsquo;s my moral obligation to make a conscious effort in bringing this to your attention and then you can decide whether to take heed or not.\nWhy Should I Care? Imagine you\u0026rsquo;ve turned 50 in 2050 and you are running for President or Prime Minister. Just before a week of elections some of the insensitive content, that you had posted on the Internet when you were a stupid teenager, resurfaced. Even though you had deleted that content as soon as you posted it, you don\u0026rsquo;t know how it still exists. Well, welcome to the 21st Century, where your data is going to persist as long as the human race is alive. The worst of it all, your data lies with the Intelligence and business organizations who are under no obligation to keep it secure and more often than not, it is used against you.\nAlso Imagine you’re in 2030, where you are being ranked in a society based on your track record on the Internet and all the regular monitoring that is being done. Your points get deducted each time you break a rule like searching some prohibited things on web, trying to cross the road on red light or for any action deemed socially unacceptable by your government. If your total points fall below a certain threshold, you’d be socially isolated. This does seem like one of a Black mirror’s episodes, but some extent of it is already happening in a few countries, believe it or not.\nHere is an interesting excerpt from Snowden’s book:\n“if something can be done, it probably will be done, and possibly already has been”.\nHow do we give away our data? If I got a penny for every time I scrolled down a user-agreement without reading a single word, I would be a millionaire. I bet 100% of us, at one time or the other avoided reading the content of this long-boring thing. This ignorance of us is then exploited to make us agree to their terms and conditions, and even provide some, the permission to track our behaviour. This is our fault but no conscious efforts are ever made by the businesses to put forth these user agreements in more user friendly format. These are examples of the few agreement terms that you agree to:\n    Google\u0026#39;s User Agreement        Facebook\u0026#39;s User Agreement       Why is Facebook following me on some random site?     This is just the tip of the iceberg. I’m not saying that it’s against the law, what I’m asking is, Are you aware of this? Some organizations keep your data and creates your shadow profile even if you never signed up for their services. So if you are sharing your photos, videos or any of the private stuff without paying for it, just know that it’s not free. I’m sure they are secure from the outside world, but how do we know who they consider the outsider and who is the insider?\nAnother important fact you should know is that it’s not only the data that we consciously agree to share, is used. It’s the data that can be derived from that data, called metadata, which is more threatening. Where are you most likely to be located at midnight? whom you are most likely to give a call in the evening? what can most likely scare you? How can you be convinced to do something? when you are most likely to go out and grab a burger? These are a few questions that can potentially be answered through your metadata.\nThen there are things that we have never agreed to like face-recognition and monitoring through public CCTVs, which is being actively done and then combined to take the tracking stuff to the next level. Even your cell-phone is listening to you in the background. Try saying Ok Google, Hey Siri or Hey Alexa.\nAnother way I think about all this is, tomorrow they are going to build a super-smart Artificial Intelligence that would have access to all my data (pics, posts, messages, videos, etc), because I\u0026rsquo;ve consciously or unconsciously agreed to it while saying yes to those user agreements. That thing is going to know me from the inside out. From my fears to my failures, my weakness, my sentiments, and whatnot. This certainly won\u0026rsquo;t be a comfortable thing to deal with.\nThis post has already become huge. I was hoping to share many more insights on how our actions on the web are tied to our Identity, to monitor our behavior. It’s a topic for another blog but the first step to solve an issue is to identify that it\u0026rsquo;s an issue. I hope I’ve ignited enough spark in you to do your probing on this topic but here is the thing:\nThe Internet is something that is now part of everyone\u0026rsquo;s life 24x7.\nI know they say Ignorance is Bliss, but if something of this level is at stake, Ignorance can be fatal. Be more conscious and cautious of the actions taken by authority/businesses on matters related to online privacy and try to mitigate the grave dangers that the Internet poses through knowledge. At least try to understand this thing called the Internet, so you can comprehend the repercussions of your actions.\n"
            }
        
    ,
        
            {
                "ref": "/post/essay/changes_are_inevitable/",
                "title": "Changes are Inevitable",
                "section": "post",
                "date" : "2020.03.28",
                "body": "No doubt, changes are inevitable. The person who resists the changes that are for his/her good is no better than a dead person. I had to make a change.\nThis is the change that every blogger makes sooner or later. I have decided to move to my own space. It\u0026rsquo;s nothing fancy, simple enough to make me feel that I\u0026rsquo;m in control of my content. Before moving here, I started by writing articles on wordpress from 2017. Then I moved to medium, wrote a bunch of articles there and now here I am.\nBefore moving on to a new journey, I would like to reminisce about the blog posts that I enjoyed writing and the articles that matter the most for me. Most of the things that I\u0026rsquo;ve written lately is purely based on my past experiences and few future articles are also going to be on the similar lines until I run out of things. but before talking about the future, let me rank my top 3 picks from Wordpress, in no particular order.\nJOURNEY TO ACM ACM (coding club) is something that is and will always remain close to my heart. I always thought of it as a platform using which I could make some impact on the coding culture of the college. was I able to make some impact? who knows, I know I tried.\nIt is also a place where I came in contact with many awesome seniors. This post was a 2 part series in which I wrote about how I made it to the club and it still gives me goosebumps to think about those times.\nInterView Time This was the first time I had an interview experience and how could I not write about it. This experience played an important role in changing my perception of a few things\nHACK IN THE NORTH Another 2 part series, that covered my experience of attending a National Hackathon for the first time. My team won the 2nd prize. I made friends with some pretty cool seniors and it was an amazing experience overall.\n Now the question is what am I planning to write in the future?\nI want to provide some value through my blogs and the main focus would be on that. Rest, I hope you keep finding my blog helpful.\n"
            }
        
    
]